
name: webapp Test CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Run commands with cd
        run: |
          cd smartexpense
          
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Install dependencies
        run: mvn install --no-transfer-progress --quiet
        working-directory: ./smartexpense

      - name: Run tests
        run: mvn test --no-transfer-progress --quiet
        working-directory: ./smartexpense

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: smartExpense-application-artifact
          path: ./smartexpense/target/smartexpense-0.0.1-SNAPSHOT.jar
          retention-minutes: 20

  format-validate:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'  # Only run this on PR events
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Packer
        uses: hashicorp/setup-packer@v2

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: smartExpense-application-artifact
          path: ./target

      - name: Initialize Packer project
        run: packer init ./packer/templates/aws-ami.pkr.hcl

      - name: Format Packer templates
        run: packer fmt -check -diff ./packer/templates/aws-ami.pkr.hcl

      - name: Validate Packer templates
        run: packer validate -var-file=./packer/variables.pkvars.hcl ./packer/templates/aws-ami.pkr.hcl

  build-image:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Packer
        uses: hashicorp/setup-packer@v2

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: healthz-application-artifact
          path: ./target

      - name: Install AWS CLI
        run: sudo apt-get install awscli -y

      - name: Configure AWS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION}}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION

      - name: Initialize Packer project
        run: packer init ./packer/templates/aws-ami.pkr.hcl

      - name: Build Packer image
        run: packer build -var-file=packer/variables.pkvars.hcl packer/templates/aws-ami.pkr.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DB_USERNAME: ${{ vars.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          aws_region: ${{ vars.AWS_REGION }}

      - name: Get Latest AMI ID
        id: get_ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --filters "Name=name,Values=custom-healthz-application*" "Name=state,Values=available" \
            --query "Images | sort_by(@, &CreationDate)[-1].ImageId" --output text)
          echo "Latest AMI ID: $AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Update Launch Template
        id: update_template
        run: |
          # Get the Launch Template ID
          TEMPLATE_ID=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "web_app_asg" \
            --query "AutoScalingGroups[0].LaunchTemplate.LaunchTemplateId" --output text)
          echo "Launch Template ID: $TEMPLATE_ID"

          # Get the current instance type from the launch template
          INSTANCE_TYPE=$(aws ec2 describe-launch-template-versions \
            --launch-template-id $TEMPLATE_ID \
            --versions "1" \
            --query "LaunchTemplateVersions[0].LaunchTemplateData.InstanceType" --output text)
          echo "Current Instance Type: $INSTANCE_TYPE"
          
          # Create a new launch template version with the updated AMI and existing instance type
          aws ec2 create-launch-template-version \
            --launch-template-id $TEMPLATE_ID \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\",\"InstanceType\":\"$INSTANCE_TYPE\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' --output text > new_version.txt
          
          # Get the new version number
          NEW_VERSION=$(cat new_version.txt)
          echo "New Launch Template Version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV 
          # Update the Auto Scaling group to use the new launch template version
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "web_app_asg" \
            --launch-template "{\"LaunchTemplateId\":\"$TEMPLATE_ID\",\"Version\":\"$NEW_VERSION\"}"
      - name: Initiate Instance Refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "web_app_asg" \
            --preferences '{"MinHealthyPercentage": 100, "InstanceWarmup": 120}' \
            --query "InstanceRefreshId" --output text)
          echo "Instance refresh started with ID: $REFRESH_ID"
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV        

      - name: Wait for Instance Refresh to Complete
        run: |
          REFRESH_ID=${{ env.REFRESH_ID }}
          ASG_NAME="web_app_asg"
          STATUS=""

          until [ "$STATUS" == "Successful" ] || [ "$STATUS" == "Failed" ]; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "web_app_asg" \
              --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_ID'].Status | [0]" --output text)
            echo "Current status: $STATUS"
            if [ "$STATUS" == "Failed" ]; then
              echo "Instance refresh failed. Exiting."
              exit 1
            fi
            sleep 30
          done
          echo "Instance refresh completed successfully."
