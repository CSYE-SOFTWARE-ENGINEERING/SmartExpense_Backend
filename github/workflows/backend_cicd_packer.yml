name: Packer Build on Merge

on:
  push:
    branches:
      - main  # Trigger when changes are pushed to main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Install dependencies
        run: mvn install --no-transfer-progress --quiet

      - name: Run tests
        run: mvn test --no-transfer-progress --quiet

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-artifact
          path: target/*.jar
          retention-days: 1

  packer-build:
    name: Packer Build for AWS
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        include:
          - platform: "aws"
            region: "us-east-1"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-artifact
          path: output/artifact

      - name: Install AWS CLI (if missing)
        if: matrix.platform == 'aws'
        run: |
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          aws --version

      - name: Configure AWS CLI
        if: matrix.platform == 'aws'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ matrix.region }}
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set region "$AWS_REGION"
          echo "Verifying AWS credentials..."
          aws sts get-caller-identity

      - name: Install Packer
        run: |
          VERSION="1.8.4"
          ARCH="amd64"
          curl -fsSL "https://releases.hashicorp.com/packer/${VERSION}/packer_${VERSION}_linux_${ARCH}.zip" -o "packer.zip"
          unzip packer.zip
          sudo mv packer /usr/local/bin/
          packer --version

      - name: Initialize Packer
        run: |
          packer init aws-ubuntu.pkr.hcl
          echo "Packer init completed"

      - name: List files
        run: ls -l

      - name: Create SSH Private Key
        if: matrix.platform == 'aws'
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > my-key.pem
          chmod 600 my-key.pem
          ls -l my-key.pem

      - name: Deregister existing AMI and delete snapshots
        if: matrix.platform == 'aws'
        run: |
          AMI_NAME="MyCustomAMI01"
          EXISTING_AMI_ID=$(aws ec2 describe-images --owners self --filters "Name=name,Values=$AMI_NAME" --query "Images[0].ImageId" --output text 2>/dev/null)

          if [ "$EXISTING_AMI_ID" != "None" ] && [ -n "$EXISTING_AMI_ID" ]; then
            echo "Deregistering existing AMI: $EXISTING_AMI_ID"
            aws ec2 deregister-image --image-id "$EXISTING_AMI_ID"

            SNAPSHOT_IDS=$(aws ec2 describe-images --image-ids "$EXISTING_AMI_ID" --query "Images[].BlockDeviceMappings[].Ebs.SnapshotId" --output text 2>/dev/null)
            for SNAPSHOT_ID in $SNAPSHOT_IDS; do
              echo "Deleting snapshot: $SNAPSHOT_ID"
              aws ec2 delete-snapshot --snapshot-id "$SNAPSHOT_ID"
            done
          else
            echo "No existing AMI found with the name $AMI_NAME"
          fi

      - name: Build AMI with Packer
        timeout-minutes: 30
        if: matrix.platform == 'aws'
        run: |
          packer build \
            -force \
            -var "ssh_private_key_file=$(pwd)/my-key.pem" \
            -var "ami_name=MyCustomAMI01" \
            -var-file=aws.pkrvar.hcl \
            aws-ubuntu.pkr.hcl
